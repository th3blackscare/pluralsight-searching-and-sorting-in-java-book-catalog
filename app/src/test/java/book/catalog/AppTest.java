/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package book.catalog;

import org.junit.Test;

import com.google.gson.*;
import com.google.gson.reflect.TypeToken;

import static org.junit.Assert.*;

import java.io.*;
import java.lang.reflect.Type;
import java.time.*;
import java.util.*;


public class AppTest {
    String filePath = "src/main/resources/books.json";

    @Test public void testMergeSort() {
        Catalog testCatalog = new Catalog(filePath);
        List<Book> books = new ArrayList<>(testCatalog.books);
        Collections.sort(books);
        assertEquals("mergeSort() implementation did not sort the books in the correct order", testCatalog.books, books);
    }

    @Test public void testQuickSort() {
        List<Book>books = new ArrayList<>();

        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.registerTypeAdapter(LocalDate.class, new LocalDateAdapter());
        Gson gson = gsonBuilder.create();
        Type listType = new TypeToken<List<Book>>(){}.getType();

        try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {
            books = gson.fromJson(bufferedReader, listType);
        } catch (IOException e) {
            System.err.println("Unable to read file: " + e.getMessage());
        } catch (JsonSyntaxException e) {
            System.err.println("Unable to parse JSON: " + e.getMessage());
        }
        List<Book> books2 = new ArrayList<>(books);
        Catalog.quickSort(books, 0, books.size()-1);
        Collections.sort(books2);
        assertEquals("quickSort() implementation did not sort the books in the correct order", books, books2);
    }

    @Test public void testBinarySearch() {
        Catalog testCatalog = new Catalog(filePath);

        Collections.sort(testCatalog.books);

        int search1 = Catalog.binarySearch(testCatalog.books, "The Alchemist");
        int search2 = Catalog.binarySearch(testCatalog.books, "The Great Gatsby");

        assertEquals("binarySearch function returned incorrect value(1)", 5, search1);
        assertEquals("binarySearch function returned incorrect value(2)", 12, search2);
    }

    @Test public void testMerge() {
        Book book1 = new Book("aa", null, 0, LocalDate.parse("1960-07-11"), "");
        Book book2 = new Book("bb", null, 0, LocalDate.parse("1960-07-11"), "");
        Book book3 = new Book("cc", null, 0, LocalDate.parse("1960-07-11"), "");
        Book book4 = new Book("dd", null, 0, LocalDate.parse("1960-07-11"), "");
        Book book5 = new Book("ee", null, 0, LocalDate.parse("1960-07-11"), "");
        Book book6 = new Book("ff", null, 0, LocalDate.parse("1960-07-11"), "");

        List<Book> list1 = new ArrayList<Book>(Arrays.asList(book1, book3, book6));
        List<Book> list2 = new ArrayList<Book>(Arrays.asList(book2, book4, book5));

        List<Book> output = new ArrayList<Book>(Arrays.asList(book3, book1, book4, book2, book6, book5));
        List<Book> expected = new ArrayList<Book>(Arrays.asList(book1, book2, book3, book4, book5, book6));
        Catalog.merge(list1, list2, output);

        assertEquals("merge function did not properly order the given list", expected, output);
    }

    @Test public void testPartition() {
        Book book1 = new Book("aa", null, 0, null, "");
        Book book2 = new Book("bb", null, 0, null, "");
        Book book3 = new Book("cc", null, 0, null, "");
        Book book4 = new Book("dd", null, 0, null, "");
        Book book5 = new Book("ee", null, 0, null, "");
        Book book6 = new Book("ff", null, 0, null, "");

        List<Book> output = new ArrayList<Book>(Arrays.asList(book3, book1, book5, book2, book6, book4));
        List<Book> expected1 = new ArrayList<Book>(Arrays.asList(book3, book1, book2, book4, book6, book5));
        int p1 = Catalog.partition(output, 0, output.size()-1);

        assertEquals("partition function did not divide the given array correctly on first pass.", expected1, output);

        Catalog.partition(output, 0, p1 - 1);
        List<Book> expected2 = new ArrayList<Book>(Arrays.asList(book1, book2, book3, book4, book6, book5));
        assertEquals("partition function did not divide the left(smaller) array correctly.", expected2, output);

        Catalog.partition(output, p1, output.size()-1);
        List<Book> expected3 = new ArrayList<Book>(Arrays.asList(book1, book2, book3, book4, book5, book6));
        assertEquals("partition function did not divide the right(larger) array correctly.", expected3, output);
    }
}
